{"version":3,"sources":["component/Board/Square/Square.module.css","component/UI/Modal/Modal.module.css","container/Canvas/Canvas.module.css","component/UI/Button/Button.module.css","component/Board/Board.module.css","component/StatusBar/StatusBar.module.css","component/StatusBar/StatusCell/StatusCell.module.css","component/UI/Backdrop/Backdrop.module.css","component/UI/Modal/Modal.js","component/UI/Button/Button.js","component/Board/Square/Square.js","component/Board/Board.js","component/StatusBar/StatusCell/StatusCell.js","component/StatusBar/StatusBar.js","component/UI/Backdrop/Backdrop.js","container/Canvas/Canvas.js","container/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","props","divCss","css","normal","success","push","Success","Fail","className","join","style","position","fixedPosition","children","Button","type","onClick","clicked","React","memo","Square","revealed","flagged","Flag","numeric","Number","bombed","Bomb","Empty","content","numberStyle","number","color","getNumberStyle","onContextMenu","onMouseDown","mouseDown","onMouseUp","mouseUp","onTouchStart","onTouchEnd","onTouchMove","tap","Board","board","map","row","i","key","square","j","rows","undefined","event","clickedHandler","mouseDownHandler","mouseUpHandler","StatusCell","StatusBar","time","moves","bombs","bombsFound","Backdrop","Canvas","state","columns","squares","squaresRevealed","bombsPoints","timer","firstClick","failed","calculateRowsAndColumns","width","populateBoard","isGameSucceeded","revealAllBombs","clearInterval","setState","length","bombPoint","revealSquare","column","bombCount","adjacentBombCount","prevState","revealAdjacentSquares","isIndexOutOfBounds","handleFirstClick","generateBombs","indexOfCoordinate","x","Math","floor","random","y","array","randomlyBecomeBomb","squareCount","handleLeftClick","_","cloneDeep","handleRightClick","squareClickedHandler","preventDefault","setTimeout","clearTimeout","window","innerWidth","numOfSquares","numOfBombs","this","setInterval","finishedMessage","restartHandler","Component","Game","buttonClickedHandler","gameRestartHandler","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54f46d55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__-atLt\",\"Flag\":\"Square_Flag__3L1jX\",\"Number\":\"Square_Number__2fL49\",\"Bomb\":\"Square_Bomb__dW5SF\",\"Empty\":\"Square_Empty__2HdZY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1TS5G\",\"Success\":\"Modal_Success__2IBP5\",\"Fail\":\"Modal_Fail__2fLs3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"Canvas_Canvas__1Dk0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3tcKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__wXQhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBar\":\"StatusBar_StatusBar__2iz1F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusCell\":\"StatusCell_StatusCell__ikAFU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__1mxdC\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Modal.module.css';\r\n\r\nconst Modal = (props) => {\r\n    const divCss = [css.Modal];\r\n    if (!props.normal) {\r\n        if (!props.success) {\r\n            divCss.push(css.Fail);\r\n        }\r\n        else {\r\n            divCss.push(css.Success);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={divCss.join(\" \")} style={{position: props.fixedPosition ? \"fixed\" : \"absolute\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nModal.propTypes = {\r\n    normal: PropTypes.bool,\r\n    success: PropTypes.bool,\r\n    fixedPosition: PropTypes.bool\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <div className={css.Button} style={props.style}>\r\n            <button type=\"button\" onClick={props.clicked}>{props.children}</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nButton.propTypes = {\r\n    clicked: PropTypes.func.isRequired,\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Square.module.css';\r\n\r\nconst getNumberStyle = (number) => {\r\n    // Choose the font color depending on the value of number\r\n    switch (number) {\r\n        case 1:\r\n            return {color: \"#b0e0e6\"};\r\n        case 2:\r\n            return {color: \"#376c9e\"};\r\n        case 3:\r\n            return {color: \"#252577\"};\r\n        case 4:\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n        case 8:\r\n            return {color: \"#800000\"};\r\n        default: return {color: \"#b0e0e6\"};\r\n    }\r\n}\r\n\r\nconst Square = (props) => {\r\n    // Assign different (can be multiple) CSS classes depending on the props\r\n    const divCss = [css.Square];\r\n    if (!props.revealed && props.flagged)                   divCss.push(css.Flag);\r\n    if (props.revealed && props.numeric)                    divCss.push(css.Number);\r\n    if (props.revealed && props.bombed)                     divCss.push(css.Bomb);\r\n    if (props.revealed && !props.numeric && !props.bombed)  divCss.push(css.Empty);\r\n\r\n    // Populate the content to display in the square depending on the props\r\n    let content = null;\r\n    let numberStyle = null;\r\n    // If the square is revealed and it contains a number\r\n    if (props.revealed && props.numeric && props.number) {\r\n        content = props.number;\r\n        numberStyle = getNumberStyle(props.number);\r\n    }\r\n    // If the square is revealed and it contains a bomb\r\n    else if (props.revealed && props.bombed) {\r\n        content = <i className=\"fas fa-bomb\"></i>;\r\n    }\r\n    // If the square is NOT revealed and it is flagged\r\n    else if (!props.revealed && props.flagged) {\r\n        content = <i className=\"fas fa-flag\"></i>;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={divCss.join(\" \")}\r\n            style={numberStyle}\r\n            onClick={props.clicked}\r\n            onContextMenu={props.clicked}\r\n            onMouseDown={props.mouseDown}\r\n            onMouseUp={props.mouseUp}\r\n            onTouchStart={props.mouseDown}\r\n            onTouchEnd={props.mouseUp}\r\n            onTouchMove={props.mouseUp}\r\n            tap\r\n        >\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nSquare.propTypes = {\r\n    revealed: PropTypes.bool.isRequired,\r\n    numeric: PropTypes.bool.isRequired,\r\n    bombed: PropTypes.bool,\r\n    flagged: PropTypes.bool,\r\n    number: PropTypes.number,\r\n    clicked: PropTypes.func.isRequired,\r\n    mouseDown: PropTypes.func.isRequired,\r\n    mouseUp: PropTypes.func.isRequired\r\n};\r\n\r\nexport default React.memo(Square);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Board.module.css';\r\nimport Square from './Square/Square.js';\r\n\r\nconst Board = (props) => {\r\n    return (\r\n        <div className={css.Board}>\r\n            {props.board.map((row, i) => (\r\n                <div key={i}>\r\n                    {row.map((square, j) => (\r\n                        <Square\r\n                            key={(i * props.rows) + j}\r\n                            revealed={square.revealed}\r\n                            numeric={square.number !== undefined}\r\n                            bombed={square.bombed}\r\n                            flagged={square.flagged}\r\n                            number={null || square.number}\r\n                            clicked={(event) => props.clickedHandler(event, i, j)}\r\n                            mouseDown={() => props.mouseDownHandler(i, j)}\r\n                            mouseUp={props.mouseUpHandler} />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nBoard.propTypes = {\r\n    board: PropTypes.array.isRequired,\r\n    rows: PropTypes.number.isRequired,\r\n    clickedHandler: PropTypes.func.isRequired,\r\n    mouseDownHandler: PropTypes.func.isRequired,\r\n    mouseUpHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusCell.module.css';\r\n\r\nconst StatusCell = (props) => {\r\n    return (\r\n        <div className={css.StatusCell} style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nStatusCell.propTypes = {\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default StatusCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusBar.module.css';\r\nimport StatusCell from './StatusCell/StatusCell.js';\r\n\r\nconst StatusBar = (props) => {\r\n    return (\r\n        <div className={css.StatusBar}>\r\n            <StatusCell>\r\n                {props.time}s\r\n            </StatusCell>\r\n            <StatusCell>\r\n                {props.moves}\r\n                &nbsp;&nbsp;\r\n                <i className=\"fas fa-shoe-prints\"></i>\r\n            </StatusCell>\r\n            <StatusCell>\r\n                {props.bombs - props.bombsFound}\r\n                &nbsp;&nbsp;\r\n                <i className=\"fas fa-bomb\"></i>\r\n            </StatusCell>\r\n        </div>\r\n    );\r\n};\r\n\r\nStatusBar.propTypes = {\r\n    time: PropTypes.number.isRequired,\r\n    moves: PropTypes.number.isRequired,\r\n    bombs: PropTypes.number.isRequired,\r\n    bombsFound: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StatusBar;","import React from 'react';\r\n\r\nimport css from './Backdrop.module.css';\r\n\r\nconst Backdrop = () => {\r\n    return <div className={css.Backdrop}></div>;\r\n};\r\n\r\nexport default Backdrop;","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport css from './Canvas.module.css';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\nimport Board from '../../component/Board/Board';\r\nimport StatusBar from '../../component/StatusBar/StatusBar';\r\nimport Backdrop from '../../component/UI/Backdrop/Backdrop';\r\n\r\nclass Canvas extends Component {\r\n    constructor(props) {\r\n        super();\r\n        [this.state.rows, this.state.columns] = this.calculateRowsAndColumns(window.innerWidth, props.numOfSquares);\r\n        this.state.squares = props.numOfSquares;\r\n        this.state.bombs = props.numOfBombs;\r\n        this.state.board = this.populateBoard();\r\n    }\r\n\r\n    state = {\r\n        rows: 0,\r\n        columns: 0,\r\n        board: [],\r\n        squares: 0,\r\n        squaresRevealed: 0,\r\n        bombsPoints: [],\r\n        bombs: 0,\r\n        bombsFound: 0,\r\n        moves: 0,\r\n        time: 0,\r\n        timer: null,\r\n        firstClick: true,\r\n        success: false,\r\n        failed: false,\r\n    }\r\n\r\n    calculateRowsAndColumns = (width, squares) => {\r\n        if (squares === 100) {\r\n            const squareWidth = width / 10;\r\n            if (squareWidth >= 27) {\r\n                return [squares / 10, 10];\r\n            }\r\n            else {\r\n                return [squares / 5, 5];\r\n            }\r\n        }\r\n        else {\r\n            const squareWidth = width / 10;\r\n            if (squareWidth >= 27) {\r\n                return [squares / 10, 10];\r\n            }\r\n            else {\r\n                return [squares / 5, 5];\r\n            }\r\n        }\r\n    }\r\n\r\n    populateBoard = () => {\r\n        const board = [];\r\n\r\n        for (let i = 0; i < this.state.rows; i++) {\r\n            // For each row, push a new array\r\n            board.push([]);\r\n\r\n            for (let j = 0; j < this.state.columns; j++) {\r\n                // For each cell, push a new element\r\n                board[i].push({\r\n                    revealed: false,\r\n                    flagged: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    isGameSucceeded = () => {\r\n        if (!this.state.success && !this.state.failed && this.state.squares - this.state.squaresRevealed === this.state.bombs) {\r\n            const board = this.revealAllBombs(this.state.board);\r\n            clearInterval(this.state.timer);\r\n            this.setState({board: board, success: true});\r\n        }\r\n    }\r\n\r\n    revealAllBombs = (board) => {\r\n        // Reveal all the bombs in the board\r\n        for (let i = 0; i < this.state.bombsPoints.length; i++) {\r\n            const bombPoint = this.state.bombsPoints[i];\r\n\r\n            board[bombPoint[0]][bombPoint[1]].flagged = false;\r\n            board[bombPoint[0]][bombPoint[1]].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealSquare = (board, row, column) => {\r\n        // Count the number of adjacent bombs by the given square\r\n        const bombCount = this.adjacentBombCount(board, row, column);\r\n\r\n        if (board[row][column].flagged) {\r\n            this.setState(prevState => ({squaresRevealed: prevState.squaresRevealed + 1, bombsFound: prevState.bombsFound - 1}));\r\n        }\r\n        else {\r\n            this.setState(prevState => ({squaresRevealed: prevState.squaresRevealed + 1}));\r\n        }\r\n        \r\n        board[row][column].revealed = true;\r\n        board[row][column].flagged = false;\r\n        \r\n        // If there is no adjacent bomb, automatically reveal adjacent squares as well\r\n        if (bombCount === 0) {\r\n            board = this.revealAdjacentSquares(board, row, column);\r\n        }\r\n        // If there is adjacent bomb(s), display the number of bomb(s)\r\n        else {\r\n            board[row][column].number = bombCount;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealAdjacentSquares = (board, row, column) => {\r\n        // Sequentially reveal the given square's adjacent square(s) if it has NOT yet been revealed\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && !board[row - 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && !board[row - 1][column].revealed) {\r\n            board = this.revealSquare(board, row - 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && !board[row - 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && !board[row][column - 1].revealed) {\r\n            board = this.revealSquare(board, row, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && !board[row][column + 1].revealed) {\r\n            board = this.revealSquare(board, row, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && !board[row + 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && !board[row + 1][column].revealed) {\r\n            board = this.revealSquare(board, row + 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && !board[row + 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column + 1);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    adjacentBombCount = (board, row, column) => {\r\n        let bombCount = 0;\r\n\r\n        // Sequentially check if the given square's adjacent square(s) have bomb(s)\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && board[row - 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && board[row - 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && board[row - 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && board[row][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && board[row][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && board[row + 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && board[row + 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && board[row + 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n\r\n        return bombCount;\r\n    }\r\n\r\n    isIndexOutOfBounds = (board, row, column) => {\r\n        // Check if the given row and column indices are out of bounds\r\n        return !(row >= 0 && row < board.length && column >= 0 && column < board[row].length);\r\n    }\r\n\r\n    handleFirstClick = (row, column, board) => {\r\n        // Randomly generate bombs\r\n        const bombsPoints = this.generateBombs(row, column);\r\n\r\n        // Assign value of \"bombed\" property to each square\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[i].length; j++) {\r\n                board[i][j].bombed = this.indexOfCoordinate(bombsPoints, i, j) >= 0;\r\n            }\r\n        }\r\n\r\n        return [board, bombsPoints];\r\n    }\r\n\r\n    generateBombs = (row, column) => {\r\n        const bombsPoints = [];\r\n\r\n        // For each bomb, select a random x and y coordinate\r\n        for (let i = 0; i < this.state.bombs; i++) {\r\n            while (true) {\r\n                const x = Math.floor(Math.random() * this.state.rows);\r\n                const y = Math.floor(Math.random() * this.state.columns);\r\n\r\n                // If this random coordinate does not equal to the first-clicked coordiate and not equal to any of the generated bomb coodinates\r\n                if (x !== row && y !== column && this.indexOfCoordinate(bombsPoints, x, y) === -1) {\r\n                    bombsPoints.push([x, y]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bombsPoints;\r\n    }\r\n\r\n    indexOfCoordinate = (array, x, y) => {\r\n        // Check if the given coordinate already exists in the array;\r\n        let i = 0;\r\n        for (; i < array.length; i++) {\r\n            if (array[i][0] === x && array[i][1] === y) {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return i !== array.length ? i : -1;\r\n    }\r\n\r\n    randomlyBecomeBomb = (squares, bombs, squareCount, bombCount) => {\r\n        if (bombCount < bombs) {\r\n            // Randomly choose to become a bomb\r\n            if (squares - squareCount > bombs - bombCount) {\r\n                return 1 === Math.floor(Math.random() * Math.floor(squares / bombs)) + 1;\r\n            }\r\n            // Edge case when the number of remaining squares is equal to the number of un-generated bombs\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLeftClick = (row, column) => {\r\n        if (!this.state.board[row][column].revealed && !this.state.board[row][column].flagged) {\r\n            let board = _.cloneDeep(this.state.board);\r\n\r\n            // Handle the first click situation\r\n            let bombsPoints = this.state.bombsPoints;\r\n            if (this.state.firstClick) {\r\n                [board, bombsPoints] = this.handleFirstClick(row, column, board);\r\n                this.setState({bombsPoints: bombsPoints, firstClick: false});\r\n            }\r\n\r\n            // If the revealed square contains a bomb, reveal all the bombs\r\n            if (board[row][column].bombed) {\r\n                board = this.revealAllBombs(board);\r\n                clearInterval(this.state.timer);\r\n            }\r\n            // If the revealed square does not contain a bomb, recursively reveal adjacent square(s) if necessary\r\n            else {\r\n                board = this.revealSquare(board, row, column);\r\n            }\r\n\r\n            this.setState(prevState => ({\r\n                board: board,\r\n                failed: board[row][column].bombed,\r\n                moves: prevState.moves + 1\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleRightClick = (row, column) => {\r\n        // Place a flag on the right-clicked square if it has NOT yet been revealed\r\n        if (!this.state.board[row][column].revealed) {\r\n            const board = _.cloneDeep(this.state.board);\r\n            const square = board[row][column];\r\n            const bombsFound = square.flagged ? this.state.bombsFound - 1 : this.state.bombsFound + 1;\r\n\r\n            square.flagged = !square.flagged;\r\n            board[row][column] = square;\r\n\r\n            this.setState({board: board, bombsFound: bombsFound});\r\n        }\r\n    }\r\n\r\n    squareClickedHandler = (event, i, j) => {\r\n        // Handle left click and right click on squares if game has NOT finished\r\n        if (!this.state.success && !this.state.failed) {\r\n            if (event.type === 'click') {\r\n                this.handleLeftClick(i, j);\r\n            }\r\n            else if (event.type === 'contextmenu') {\r\n                event.preventDefault();\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }\r\n    }\r\n\r\n    mouseDownHandler = (i, j) => {\r\n        // Set up the timeout timer when mouse is held down\r\n        this.setState({mouseDown: setTimeout(() => {\r\n            if (!this.state.success && !this.state.failed) {\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }, 1000)});\r\n    }\r\n\r\n    mouseUpHandler = () => {\r\n        // Clear the timeout timer after mouse is no longer held down\r\n        clearTimeout(this.state.mouseDown);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Set up the timer after the board is rendered\r\n        this.setState({timer: setInterval(() => this.setState(prevState => ({time: prevState.time + 1})), 1000)});\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Check if the game has succeeded everytime a square is revealed\r\n        this.isGameSucceeded();\r\n    }\r\n\r\n    render() {\r\n        // Display the appropriate message after game is finished\r\n        let finishedMessage = null;\r\n        if (this.state.success) {\r\n            finishedMessage = (\r\n                <Fragment>\r\n                    <Backdrop />\r\n                    <Modal fixedPosition success>\r\n                        You swept all the mines in {this.state.time}s with {this.state.moves} moves!\r\n                        <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                    </Modal>\r\n                </Fragment>\r\n            );\r\n        }\r\n        else if (this.state.failed) {\r\n            finishedMessage = (\r\n                <Fragment>\r\n                    <Backdrop />\r\n                    <Modal fixedPosition>\r\n                        Mine exploded!\r\n                        <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                    </Modal>\r\n                </Fragment>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className={css.Canvas}>\r\n                    <StatusBar\r\n                        time={this.state.time}\r\n                        moves={this.state.moves}\r\n                        bombs={this.state.bombs}\r\n                        bombsFound={this.state.bombsFound} />\r\n                    <Board\r\n                        board={this.state.board}\r\n                        rows={this.state.rows}\r\n                        clickedHandler={this.squareClickedHandler}\r\n                        mouseDownHandler={this.mouseDownHandler}\r\n                        mouseUpHandler={this.mouseUpHandler} />\r\n                </div>\r\n                {finishedMessage}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nCanvas.propTypes = {\r\n    numOfSquares: PropTypes.number.isRequired,\r\n    numOfBombs: PropTypes.number.isRequired,\r\n    restartHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Canvas;","import React, { Component } from 'react';\r\n\r\nimport Canvas from '../Canvas/Canvas.js';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        numOfSquares: null,\r\n        numOfBombs: null\r\n    }\r\n\r\n    buttonClickedHandler = (squares, bombs) => {\r\n        this.setState({numOfSquares: squares, numOfBombs: bombs});\r\n    }\r\n\r\n    gameRestartHandler = () => {\r\n        this.setState({numOfSquares: null, numOfBombs: null});\r\n    }\r\n\r\n    render() {\r\n        const display = this.state.numOfSquares\r\n            ? (\r\n                <Canvas\r\n                    numOfSquares={this.state.numOfSquares}\r\n                    numOfBombs={this.state.numOfBombs}\r\n                    restartHandler={this.gameRestartHandler} />\r\n            )\r\n            : (\r\n                <Modal normal>\r\n                    Please choose the difficulty\r\n                    <Button clicked={() => this.buttonClickedHandler(100, 5)}>Easy</Button>\r\n                    <Button clicked={() => this.buttonClickedHandler(200, 25)}>Hard</Button>\r\n                </Modal>\r\n            );\r\n\r\n        return display;\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\n\nimport Game from './container/Game/Game.js';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}