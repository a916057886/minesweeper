{"version":3,"sources":["component/Board/Square/Square.module.css","component/UI/Modal/Modal.module.css","container/Canvas/Canvas.module.css","component/UI/Button/Button.module.css","component/Board/Board.module.css","component/StatusBar/StatusBar.module.css","component/StatusBar/StatusCell/StatusCell.module.css","component/UI/Backdrop/Backdrop.module.css","component/UI/Modal/Modal.js","component/UI/Button/Button.js","component/Board/Square/Square.js","component/Board/Board.js","component/StatusBar/StatusCell/StatusCell.js","component/StatusBar/StatusBar.js","component/UI/Backdrop/Backdrop.js","container/Canvas/Canvas.js","container/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","props","divCss","css","normal","success","push","Success","Fail","className","join","style","position","fixedPosition","children","Button","type","onClick","clicked","React","memo","Square","revealed","flagged","Flag","numeric","Number","bombed","Bomb","Empty","content","width","dimension","height","number","color","getNumberColor","onContextMenu","onMouseDown","pointerDown","onMouseUp","pointerUp","onTouchStart","onTouchEnd","Board","board","map","row","i","key","margin","padding","square","j","rows","squareDimension","undefined","event","clickedHandler","pointerDownHandler","pointerUpHandler","StatusCell","StatusBar","time","moves","bombs","bombsFound","Backdrop","Canvas","state","columns","squares","squaresRevealed","bombsPoints","timer","firstClick","failed","setup","Math","ceil","sqrt","floor","populateBoard","isGameSucceeded","revealAllBombs","clearInterval","setState","length","bombPoint","revealSquare","column","bombCount","adjacentBombCount","prevState","revealAdjacentSquares","isIndexOutOfBounds","handleFirstClick","generateBombs","indexOfCoordinate","x","random","y","array","randomlyBecomeBomb","squareCount","handleLeftClick","_","cloneDeep","setInterval","handleRightClick","squareClickedHandler","preventDefault","mouseDown","setTimeout","clearTimeout","window","innerWidth","innerHeight","numOfSquares","numOfBombs","this","finishedMessage","restartHandler","Component","Game","buttonClickedHandler","gameRestartHandler","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d357cb7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__-atLt\",\"Flag\":\"Square_Flag__3L1jX\",\"Number\":\"Square_Number__2fL49\",\"Bomb\":\"Square_Bomb__dW5SF\",\"Empty\":\"Square_Empty__2HdZY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1TS5G\",\"Success\":\"Modal_Success__2IBP5\",\"Fail\":\"Modal_Fail__2fLs3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"Canvas_Canvas__1Dk0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3tcKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__wXQhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBar\":\"StatusBar_StatusBar__2iz1F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusCell\":\"StatusCell_StatusCell__ikAFU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__1mxdC\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Modal.module.css';\r\n\r\nconst Modal = (props) => {\r\n    const divCss = [css.Modal];\r\n    if (!props.normal) {\r\n        if (!props.success) {\r\n            divCss.push(css.Fail);\r\n        }\r\n        else {\r\n            divCss.push(css.Success);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={divCss.join(\" \")} style={{position: props.fixedPosition ? \"fixed\" : \"absolute\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nModal.propTypes = {\r\n    normal: PropTypes.bool,\r\n    success: PropTypes.bool,\r\n    fixedPosition: PropTypes.bool\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <div className={css.Button} style={props.style}>\r\n            <button type=\"button\" onClick={props.clicked}>{props.children}</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nButton.propTypes = {\r\n    clicked: PropTypes.func.isRequired,\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Square.module.css';\r\n\r\nconst getNumberColor = (number) => {\r\n    // Choose the font color depending on the value of number\r\n    switch (number) {\r\n        case 1:\r\n            return \"#b0e0e6\";\r\n        case 2:\r\n            return \"#376c9e\";\r\n        case 3:\r\n            return \"#252577\";\r\n        case 4:\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n        case 8:\r\n            return \"#800000\";\r\n        default: return \"#b0e0e6\";\r\n    }\r\n}\r\n\r\nconst Square = (props) => {\r\n    // Assign different (can be multiple) CSS classes depending on the props\r\n    const divCss = [css.Square];\r\n    if (!props.revealed && props.flagged)                   divCss.push(css.Flag);\r\n    if (props.revealed && props.numeric)                    divCss.push(css.Number);\r\n    if (props.revealed && props.bombed)                     divCss.push(css.Bomb);\r\n    if (props.revealed && !props.numeric && !props.bombed)  divCss.push(css.Empty);\r\n\r\n    // Populate the content to display in the square depending on the props\r\n    let content = null;\r\n    let style = {width: props.dimension, height: props.dimension};\r\n    // If the square is revealed and it contains a number\r\n    if (props.revealed && props.numeric && props.number) {\r\n        content = props.number;\r\n        style.color = getNumberColor(props.number);\r\n    }\r\n    // If the square is revealed and it contains a bomb\r\n    else if (props.revealed && props.bombed) {\r\n        content = <i className=\"fas fa-bomb\"></i>;\r\n    }\r\n    // If the square is NOT revealed and it is flagged\r\n    else if (!props.revealed && props.flagged) {\r\n        content = <i className=\"fas fa-flag\"></i>;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={divCss.join(\" \")}\r\n            style={style}\r\n            onClick={props.clicked}\r\n            onContextMenu={props.clicked}\r\n            onMouseDown={props.pointerDown}\r\n            onMouseUp={props.pointerUp}\r\n            onTouchStart={props.pointerDown}\r\n            onTouchEnd={props.pointerUp}\r\n        >\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nSquare.propTypes = {\r\n    dimension: PropTypes.number.isRequired,\r\n    revealed: PropTypes.bool.isRequired,\r\n    numeric: PropTypes.bool.isRequired,\r\n    bombed: PropTypes.bool,\r\n    flagged: PropTypes.bool,\r\n    number: PropTypes.number,\r\n    clicked: PropTypes.func.isRequired,\r\n    pointerDown: PropTypes.func.isRequired,\r\n    pointerUp: PropTypes.func.isRequired\r\n};\r\n\r\nexport default React.memo(Square);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Board.module.css';\r\nimport Square from './Square/Square.js';\r\n\r\nconst Board = (props) => {\r\n    return (\r\n        <div className={css.Board}>\r\n            {props.board.map((row, i) => (\r\n                <div key={i} style={{margin: \"0\", padding: \"0\"}}>\r\n                    {row.map((square, j) => (\r\n                        <Square\r\n                            key={(i * props.rows) + j}\r\n                            dimension={props.squareDimension}\r\n                            revealed={square.revealed}\r\n                            numeric={square.number !== undefined}\r\n                            bombed={square.bombed}\r\n                            flagged={square.flagged}\r\n                            number={null || square.number}\r\n                            clicked={(event) => props.clickedHandler(event, i, j)}\r\n                            pointerDown={() => props.pointerDownHandler(i, j)}\r\n                            pointerUp={props.pointerUpHandler} />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nBoard.propTypes = {\r\n    squareDimension: PropTypes.number.isRequired,\r\n    board: PropTypes.array.isRequired,\r\n    rows: PropTypes.number.isRequired,\r\n    clickedHandler: PropTypes.func.isRequired,\r\n    pointerDownHandler: PropTypes.func.isRequired,\r\n    pointerUpHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusCell.module.css';\r\n\r\nconst StatusCell = (props) => {\r\n    return (\r\n        <div className={css.StatusCell} style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nStatusCell.propTypes = {\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default StatusCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusBar.module.css';\r\nimport StatusCell from './StatusCell/StatusCell.js';\r\n\r\nconst StatusBar = (props) => {\r\n    return (\r\n        <div className={css.StatusBar}>\r\n            <StatusCell>\r\n                {props.time}s\r\n            </StatusCell>\r\n            <StatusCell>\r\n                {props.moves}\r\n                &nbsp;&nbsp;\r\n                <i className=\"fas fa-shoe-prints\"></i>\r\n            </StatusCell>\r\n            <StatusCell>\r\n                {props.bombs - props.bombsFound}\r\n                &nbsp;&nbsp;\r\n                <i className=\"fas fa-bomb\"></i>\r\n            </StatusCell>\r\n        </div>\r\n    );\r\n};\r\n\r\nStatusBar.propTypes = {\r\n    time: PropTypes.number.isRequired,\r\n    moves: PropTypes.number.isRequired,\r\n    bombs: PropTypes.number.isRequired,\r\n    bombsFound: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StatusBar;","import React from 'react';\r\n\r\nimport css from './Backdrop.module.css';\r\n\r\nconst Backdrop = () => {\r\n    return <div className={css.Backdrop}></div>;\r\n};\r\n\r\nexport default Backdrop;","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport css from './Canvas.module.css';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\nimport Board from '../../component/Board/Board';\r\nimport StatusBar from '../../component/StatusBar/StatusBar';\r\nimport Backdrop from '../../component/UI/Backdrop/Backdrop';\r\n\r\nclass Canvas extends Component {\r\n    constructor(props) {\r\n        super();\r\n        [this.state.rows, this.state.columns, this.state.squareDimension] = this.setup(window.innerWidth, window.innerHeight, props.numOfSquares);\r\n        this.state.squares = this.state.rows * this.state.columns;\r\n        this.state.bombs = props.numOfBombs;\r\n        this.state.board = this.populateBoard();\r\n    }\r\n\r\n    state = {\r\n        rows: 0,\r\n        columns: 0,\r\n        board: [],\r\n        squareDimension: 0,\r\n        squares: 0,\r\n        squaresRevealed: 0,\r\n        bombsPoints: [],\r\n        bombs: 0,\r\n        bombsFound: 0,\r\n        moves: 0,\r\n        time: 0,\r\n        timer: null,\r\n        firstClick: true,\r\n        success: false,\r\n        failed: false,\r\n    }\r\n\r\n    setup = (width, height, squares) => {\r\n        // PC & Tablet resolution\r\n        if (width > 700 && height > 700) {\r\n            return [Math.ceil(Math.sqrt(squares)), Math.ceil(Math.sqrt(squares)), 50];\r\n        }\r\n        // Phone resolution\r\n        else {\r\n            if (width > 1000)   width = 1000;\r\n\r\n            width *= 0.8;\r\n            height *= 0.8;\r\n\r\n            let dimension = 37;\r\n            if (width <= 500)   dimension = 25;\r\n\r\n            const columns = Math.floor(width / dimension);\r\n            const rows = Math.floor(squares / columns);\r\n\r\n            return [rows, columns, dimension];\r\n        }\r\n    }\r\n\r\n    populateBoard = () => {\r\n        const board = [];\r\n\r\n        for (let i = 0; i < this.state.rows; i++) {\r\n            // For each row, push a new array\r\n            board.push([]);\r\n\r\n            for (let j = 0; j < this.state.columns; j++) {\r\n                // For each cell, push a new element\r\n                board[i].push({\r\n                    revealed: false,\r\n                    flagged: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    isGameSucceeded = () => {\r\n        if (!this.state.success && !this.state.failed && this.state.squares - this.state.squaresRevealed === this.state.bombs) {\r\n            const board = this.revealAllBombs(this.state.board);\r\n            clearInterval(this.state.timer);\r\n            this.setState({board: board, success: true});\r\n        }\r\n    }\r\n\r\n    revealAllBombs = (board) => {\r\n        // Reveal all the bombs in the board\r\n        for (let i = 0; i < this.state.bombsPoints.length; i++) {\r\n            const bombPoint = this.state.bombsPoints[i];\r\n\r\n            board[bombPoint[0]][bombPoint[1]].flagged = false;\r\n            board[bombPoint[0]][bombPoint[1]].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealSquare = (board, row, column) => {\r\n        // Count the number of adjacent bombs by the given square\r\n        const bombCount = this.adjacentBombCount(board, row, column);\r\n\r\n        if (board[row][column].flagged) {\r\n            this.setState(prevState => ({squaresRevealed: prevState.squaresRevealed + 1, bombsFound: prevState.bombsFound - 1}));\r\n        }\r\n        else {\r\n            this.setState(prevState => ({squaresRevealed: prevState.squaresRevealed + 1}));\r\n        }\r\n        \r\n        board[row][column].revealed = true;\r\n        board[row][column].flagged = false;\r\n        \r\n        // If there is no adjacent bomb, automatically reveal adjacent squares as well\r\n        if (bombCount === 0) {\r\n            board = this.revealAdjacentSquares(board, row, column);\r\n        }\r\n        // If there is adjacent bomb(s), display the number of bomb(s)\r\n        else {\r\n            board[row][column].number = bombCount;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealAdjacentSquares = (board, row, column) => {\r\n        // Sequentially reveal the given square's adjacent square(s) if it has NOT yet been revealed\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && !board[row - 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && !board[row - 1][column].revealed) {\r\n            board = this.revealSquare(board, row - 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && !board[row - 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && !board[row][column - 1].revealed) {\r\n            board = this.revealSquare(board, row, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && !board[row][column + 1].revealed) {\r\n            board = this.revealSquare(board, row, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && !board[row + 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && !board[row + 1][column].revealed) {\r\n            board = this.revealSquare(board, row + 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && !board[row + 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column + 1);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    adjacentBombCount = (board, row, column) => {\r\n        let bombCount = 0;\r\n\r\n        // Sequentially check if the given square's adjacent square(s) have bomb(s)\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && board[row - 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && board[row - 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && board[row - 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && board[row][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && board[row][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && board[row + 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && board[row + 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && board[row + 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n\r\n        return bombCount;\r\n    }\r\n\r\n    isIndexOutOfBounds = (board, row, column) => {\r\n        // Check if the given row and column indices are out of bounds\r\n        return !(row >= 0 && row < board.length && column >= 0 && column < board[row].length);\r\n    }\r\n\r\n    handleFirstClick = (row, column, board) => {\r\n        // Randomly generate bombs\r\n        const bombsPoints = this.generateBombs(row, column);\r\n\r\n        // Assign value of \"bombed\" property to each square\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[i].length; j++) {\r\n                board[i][j].bombed = this.indexOfCoordinate(bombsPoints, i, j) >= 0;\r\n            }\r\n        }\r\n\r\n        return [board, bombsPoints];\r\n    }\r\n\r\n    generateBombs = (row, column) => {\r\n        const bombsPoints = [];\r\n\r\n        // For each bomb, select a random x and y coordinate\r\n        for (let i = 0; i < this.state.bombs; i++) {\r\n            while (true) {\r\n                const x = Math.floor(Math.random() * this.state.rows);\r\n                const y = Math.floor(Math.random() * this.state.columns);\r\n\r\n                // If this random coordinate does not equal to the first-clicked coordiate and not equal to any of the generated bomb coodinates\r\n                if (x !== row && y !== column && this.indexOfCoordinate(bombsPoints, x, y) === -1) {\r\n                    bombsPoints.push([x, y]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bombsPoints;\r\n    }\r\n\r\n    indexOfCoordinate = (array, x, y) => {\r\n        // Check if the given coordinate already exists in the array;\r\n        let i = 0;\r\n        for (; i < array.length; i++) {\r\n            if (array[i][0] === x && array[i][1] === y) {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return i !== array.length ? i : -1;\r\n    }\r\n\r\n    randomlyBecomeBomb = (squares, bombs, squareCount, bombCount) => {\r\n        if (bombCount < bombs) {\r\n            // Randomly choose to become a bomb\r\n            if (squares - squareCount > bombs - bombCount) {\r\n                return 1 === Math.floor(Math.random() * Math.floor(squares / bombs)) + 1;\r\n            }\r\n            // Edge case when the number of remaining squares is equal to the number of un-generated bombs\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLeftClick = (row, column) => {\r\n        if (!this.state.board[row][column].revealed && !this.state.board[row][column].flagged) {\r\n            let board = _.cloneDeep(this.state.board);\r\n\r\n            // Handle the first click situation\r\n            let bombsPoints = this.state.bombsPoints;\r\n            if (this.state.firstClick) {\r\n                [board, bombsPoints] = this.handleFirstClick(row, column, board);\r\n                // Set up the timer after the board is rendered\r\n                this.setState({\r\n                    bombsPoints: bombsPoints,\r\n                    firstClick: false,\r\n                    timer: setInterval(() => this.setState(prevState => ({time: prevState.time + 1})), 1000)\r\n                });\r\n            }\r\n\r\n            // If the revealed square contains a bomb, reveal all the bombs\r\n            if (board[row][column].bombed) {\r\n                board = this.revealAllBombs(board);\r\n                clearInterval(this.state.timer);\r\n            }\r\n            // If the revealed square does not contain a bomb, recursively reveal adjacent square(s) if necessary\r\n            else {\r\n                board = this.revealSquare(board, row, column);\r\n            }\r\n\r\n            this.setState(prevState => ({\r\n                board: board,\r\n                failed: board[row][column].bombed,\r\n                moves: prevState.moves + 1\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleRightClick = (row, column) => {\r\n        // Place a flag on the right-clicked square if it has NOT yet been revealed\r\n        if (!this.state.board[row][column].revealed) {\r\n            const board = _.cloneDeep(this.state.board);\r\n            const square = board[row][column];\r\n            const bombsFound = square.flagged ? this.state.bombsFound - 1 : this.state.bombsFound + 1;\r\n\r\n            square.flagged = !square.flagged;\r\n            board[row][column] = square;\r\n\r\n            this.setState({board: board, bombsFound: bombsFound});\r\n        }\r\n    }\r\n\r\n    squareClickedHandler = (event, i, j) => {\r\n        // Handle left click and right click on squares if game has NOT finished\r\n        if (!this.state.success && !this.state.failed) {\r\n            if (event.type === 'click') {\r\n                this.handleLeftClick(i, j);\r\n            }\r\n            else if (event.type === 'contextmenu') {\r\n                event.preventDefault();\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }\r\n    }\r\n\r\n    pointerDownHandler = (i, j) => {\r\n        // Set up the timeout timer when mouse is held down\r\n        this.setState({mouseDown: setTimeout(() => {\r\n            if (!this.state.success && !this.state.failed) {\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }, 1000)});\r\n    }\r\n\r\n    pointerUpHandler = () => {\r\n        // Clear the timeout timer after mouse is no longer held down\r\n        clearTimeout(this.state.mouseDown);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Check if the game has succeeded everytime a square is revealed\r\n        this.isGameSucceeded();\r\n    }\r\n\r\n    render() {\r\n        // Display the appropriate message after game is finished\r\n        let finishedMessage = null;\r\n        if (this.state.success) {\r\n            finishedMessage = (\r\n                <Fragment>\r\n                    <Backdrop />\r\n                    <Modal fixedPosition success>\r\n                        You swept all the mines in {this.state.time}s with {this.state.moves} moves!\r\n                        <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                    </Modal>\r\n                </Fragment>\r\n            );\r\n        }\r\n        else if (this.state.failed) {\r\n            finishedMessage = (\r\n                <Fragment>\r\n                    <Backdrop />\r\n                    <Modal fixedPosition>\r\n                        Mine exploded!\r\n                        <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                    </Modal>\r\n                </Fragment>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className={css.Canvas}>\r\n                    <StatusBar\r\n                        time={this.state.time}\r\n                        moves={this.state.moves}\r\n                        bombs={this.state.bombs}\r\n                        bombsFound={this.state.bombsFound} />\r\n                    <Board\r\n                        squareDimension={this.state.squareDimension}\r\n                        board={this.state.board}\r\n                        rows={this.state.rows}\r\n                        clickedHandler={this.squareClickedHandler}\r\n                        pointerDownHandler={this.pointerDownHandler}\r\n                        pointerUpHandler={this.pointerUpHandler} />\r\n                </div>\r\n                {finishedMessage}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nCanvas.propTypes = {\r\n    numOfSquares: PropTypes.number.isRequired,\r\n    numOfBombs: PropTypes.number.isRequired,\r\n    restartHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Canvas;","import React, { Component } from 'react';\r\n\r\nimport Canvas from '../Canvas/Canvas.js';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        numOfSquares: null,\r\n        numOfBombs: null\r\n    }\r\n\r\n    buttonClickedHandler = (squares, bombs) => {\r\n        this.setState({numOfSquares: squares, numOfBombs: bombs});\r\n    }\r\n\r\n    gameRestartHandler = () => {\r\n        this.setState({numOfSquares: null, numOfBombs: null});\r\n    }\r\n\r\n    render() {\r\n        const display = this.state.numOfSquares\r\n            ? (\r\n                <Canvas\r\n                    numOfSquares={this.state.numOfSquares}\r\n                    numOfBombs={this.state.numOfBombs}\r\n                    restartHandler={this.gameRestartHandler} />\r\n            )\r\n            : (\r\n                <Modal normal>\r\n                    Please choose the difficulty\r\n                    <Button clicked={() => this.buttonClickedHandler(60, 5)}>Easy</Button>\r\n                    <Button clicked={() => this.buttonClickedHandler(100, 20)}>Hard</Button>\r\n                </Modal>\r\n            );\r\n\r\n        return display;\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\n\nimport Game from './container/Game/Game.js';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}