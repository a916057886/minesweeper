{"version":3,"sources":["component/Square/Square.module.css","container/Canvas/Canvas.module.css","component/UI/StatusCell/StatusCell.module.css","component/UI/Modal/Modal.module.css","component/UI/Button/Button.module.css","component/Square/Square.js","component/UI/StatusCell/StatusCell.js","component/UI/Modal/Modal.js","component/UI/Button/Button.js","container/Canvas/Canvas.js","container/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","memo","props","divCss","css","Square","revealed","flagged","push","Flag","numeric","Number","bombed","Bomb","Empty","content","numberStyle","number","color","getNumberStyle","className","join","style","onClick","clicked","onContextMenu","onMouseDown","mouseDown","onMouseUp","mouseUp","StatusCell","children","Modal","position","fixedPosition","Button","type","Canvas","state","rows","columns","board","squares","bombsPoints","bombs","bombsFound","moves","time","timer","firstClick","success","failed","calculateRowsAndColumns","width","Math","floor","populateBoard","i","j","isGameSucceeded","clearInterval","setState","revealAllBombs","length","bombPoint","revealSurroundedBombs","bombCount","isBombSurrounded","row","column","isSurrounded","isEdgeSurrounded","bombRow","bombColumn","edgeRow","edgeColumn","isIndexOutOfBounds","revealSquare","adjacentBombCount","revealAdjacentSquares","handleFirstClick","squareCount","isBomb","randomlyBecomeBomb","random","handleLeftClick","_","cloneDeep","newBombsFound","prevState","handleRightClick","square","squareClickedHandler","event","preventDefault","mouseDownHandler","setTimeout","mouseUpHandler","clearTimeout","window","innerWidth","numOfSquares","numOfBombs","this","setInterval","finishedMessage","restartHandler","StatusBar","Board","map","key","undefined","PureComponent","Game","buttonClickedHandler","gameRestartHandler","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14f4f80e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__2mKKd\",\"Flag\":\"Square_Flag__1attG\",\"Number\":\"Square_Number__2X87B\",\"Bomb\":\"Square_Bomb__1yt4_\",\"Empty\":\"Square_Empty__2DChH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"Canvas_Canvas__1Dk0B\",\"StatusBar\":\"Canvas_StatusBar__2lBxM\",\"Board\":\"Canvas_Board__3oX7B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusCell\":\"StatusCell_StatusCell__1Joh8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1TS5G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3tcKB\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Square.module.css';\r\n\r\nconst getNumberStyle = (number) => {\r\n    // Choose the font color depending on the value of number\r\n    switch (number) {\r\n        case 1:\r\n            return {color: \"#b0e0e6\"};\r\n        case 2:\r\n            return {color: \"#376c9e\"};\r\n        case 3:\r\n            return {color: \"#252577\"};\r\n        case 4:\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n        case 8:\r\n            return {color: \"#800000\"};\r\n        default: return {color: \"#b0e0e6\"};\r\n    }\r\n}\r\n\r\nconst Square = (props) => {\r\n    // Assign different (can be multiple) CSS classes depending on the props\r\n    const divCss = [css.Square];\r\n    if (!props.revealed && props.flagged)                   divCss.push(css.Flag);\r\n    if (props.revealed && props.numeric)                    divCss.push(css.Number);\r\n    if (props.revealed && props.bombed)                     divCss.push(css.Bomb);\r\n    if (props.revealed && !props.numeric && !props.bombed)  divCss.push(css.Empty);\r\n\r\n    // Populate the content to display in the square depending on the props\r\n    let content = null;\r\n    let numberStyle = null;\r\n    // If the square is revealed and it contains a number\r\n    if (props.revealed && props.numeric && props.number) {\r\n        content = props.number;\r\n        numberStyle = getNumberStyle(props.number);\r\n    }\r\n    // If the square is revealed and it contains a bomb\r\n    else if (props.revealed && props.bombed) {\r\n        content = <i className=\"fas fa-bomb\"></i>;\r\n    }\r\n    // If the square is NOT revealed and it is flagged\r\n    else if (!props.revealed && props.flagged) {\r\n        content = <i className=\"fas fa-flag\"></i>;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={divCss.join(\" \")}\r\n            style={numberStyle}\r\n            onClick={props.clicked}\r\n            onContextMenu={props.clicked}\r\n            onMouseDown={props.mouseDown}\r\n            onMouseUp={props.mouseUp}\r\n        >\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nSquare.propTypes = {\r\n    revealed: PropTypes.bool.isRequired,\r\n    numeric: PropTypes.bool.isRequired,\r\n    bombed: PropTypes.bool,\r\n    flagged: PropTypes.bool,\r\n    number: PropTypes.number,\r\n    clicked: PropTypes.func.isRequired,\r\n    mouseDown: PropTypes.func.isRequired,\r\n    mouseUp: PropTypes.func.isRequired\r\n};\r\n\r\nexport default React.memo(Square);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusCell.module.css';\r\n\r\nconst StatusCell = (props) => {\r\n    return (\r\n        <div className={css.StatusCell} style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nStatusCell.propTypes = {\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default StatusCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Modal.module.css';\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n        <div className={css.Modal} style={{position: props.fixedPosition ? \"fixed\" : \"absolute\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nModal.propTypes = {\r\n    fixedPosition: PropTypes.bool\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <div className={css.Button} style={props.style}>\r\n            <button type=\"button\" onClick={props.clicked}>{props.children}</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nButton.propTypes = {\r\n    clicked: PropTypes.func.isRequired,\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default Button;","import React, { Fragment, PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport css from './Canvas.module.css';\r\nimport Square from '../../component/Square/Square.js';\r\nimport StatusCell from '../../component/UI/StatusCell/StatusCell.js';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\n\r\nclass Canvas extends PureComponent {\r\n    constructor(props) {\r\n        super();\r\n        [this.state.rows, this.state.columns] = this.calculateRowsAndColumns(window.innerWidth, props.numOfSquares);\r\n        this.state.squares = props.numOfSquares;\r\n        this.state.bombs = props.numOfBombs;\r\n        this.state.board = this.populateBoard();\r\n    }\r\n\r\n    state = {\r\n        rows: 0,\r\n        columns: 0,\r\n        board: [],\r\n        squares: 0,\r\n        bombsPoints: [],\r\n        bombs: 0,\r\n        bombsFound: 0,\r\n        moves: 0,\r\n        time: 0,\r\n        timer: null,\r\n        firstClick: true,\r\n        success: false,\r\n        failed: false,\r\n    }\r\n\r\n    calculateRowsAndColumns = (width, squares) => {\r\n        if (width <= 1000) {\r\n            const columns = 10;\r\n            return [squares / columns, columns];\r\n        }\r\n        else {\r\n            let columns = Math.floor(width / 50);\r\n            if (columns >= 20) {\r\n                if (squares === 100) {\r\n                    columns = 20;\r\n                }\r\n                else {\r\n                    columns = 20;\r\n                }\r\n            }\r\n            else if (columns >= 10) {\r\n                columns = 10;\r\n            }\r\n            else {\r\n                columns = 5;\r\n            }\r\n            return [squares / columns, columns];\r\n        }\r\n    }\r\n\r\n    populateBoard = () => {\r\n        const board = [];\r\n\r\n        for (let i = 0; i < this.state.rows; i++) {\r\n            // For each row, push a new array\r\n            board.push([]);\r\n\r\n            for (let j = 0; j < this.state.columns; j++) {\r\n                // For each cell, push a new element\r\n                board[i].push({\r\n                    revealed: false,\r\n                    flagged: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    isGameSucceeded = () => {\r\n        // If bombs found is greater than the total number of bombs, game is succeeded\r\n        if (this.state.bombsFound >= this.state.bombs) {\r\n            clearInterval(this.state.timer);\r\n            this.setState({success: true});\r\n        }\r\n    }\r\n\r\n    revealAllBombs = (board) => {\r\n        // Reveal all the bombs in the board\r\n        for (let i = 0; i < this.state.bombsPoints.length; i++) {\r\n            const bombPoint = this.state.bombsPoints[i];\r\n\r\n            board[bombPoint[0]][bombPoint[1]].flagged = false;\r\n            board[bombPoint[0]][bombPoint[1]].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealSurroundedBombs = (board, bombsPoints) => {\r\n        let bombCount = 0;\r\n\r\n        for (let i = 0; i < bombsPoints.length; i++) {\r\n            const bombPoint = bombsPoints[i];\r\n            // Locate all the unexposed bombs, and check if it is surrounded by revealed squares\r\n            if (!board[bombPoint[0]][bombPoint[1]].revealed) {\r\n                if (this.isBombSurrounded(board, bombPoint[0], bombPoint[1])) {\r\n                    board[bombPoint[0]][bombPoint[1]].revealed = true;\r\n                    bombCount++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return [board, bombCount];\r\n    }\r\n\r\n    isBombSurrounded = (board, row, column) => {\r\n        let isSurrounded = true;\r\n\r\n        // Sequentially check bomb's four edge squares if exist (not including diagnoal squares)\r\n        isSurrounded &= this.isEdgeSurrounded(board, row, column, row - 1, column);\r\n        isSurrounded &= this.isEdgeSurrounded(board, row, column, row + 1, column);\r\n        isSurrounded &= this.isEdgeSurrounded(board, row, column, row, column - 1);\r\n        isSurrounded &= this.isEdgeSurrounded(board, row, column, row, column + 1);\r\n\r\n        return isSurrounded;\r\n    }\r\n\r\n    isEdgeSurrounded = (board, bombRow, bombColumn, edgeRow, edgeColumn) => {\r\n        // If this edge is the board's boundary or this edge is a square and it is already revealed\r\n        if (this.isIndexOutOfBounds(board, edgeRow, edgeColumn) || board[edgeRow][edgeColumn].revealed) {\r\n            return true;\r\n        }\r\n        // If this edge is an unexposed bomb\r\n        else if (!board[edgeRow][edgeColumn].revealed && board[edgeRow][edgeColumn].bombed) {\r\n            // Alter current bomb's revealed state to true to prevent infinite recursion\r\n            board[bombRow][bombColumn].revealed = true;\r\n            // Check if this edged bomb is also surrounded\r\n            const isSurrounded = this.isBombSurrounded(board, edgeRow, edgeColumn);\r\n            // Alter current bomb's revealed state to its original value\r\n            board[bombRow][bombColumn].revealed = false;\r\n\r\n            return isSurrounded;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    revealSquare = (board, row, column) => {\r\n        // Count the number of adjacent bombs by the given square\r\n        const bombCount = this.adjacentBombCount(board, row, column);\r\n\r\n        board[row][column].revealed = true;\r\n        board[row][column].flagged = false;\r\n        \r\n        // If there is no adjacent bomb, automatically reveal adjacent squares as well\r\n        if (bombCount === 0) {\r\n            board = this.revealAdjacentSquares(board, row, column);\r\n        }\r\n        // If there is adjacent bomb(s), display the number of bomb(s)\r\n        else {\r\n            board[row][column].number = bombCount;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealAdjacentSquares = (board, row, column) => {\r\n        // Sequentially reveal the given square's adjacent square(s) if it has NOT yet been revealed\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && !board[row - 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && !board[row - 1][column].revealed) {\r\n            board = this.revealSquare(board, row - 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && !board[row - 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && !board[row][column - 1].revealed) {\r\n            board = this.revealSquare(board, row, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && !board[row][column + 1].revealed) {\r\n            board = this.revealSquare(board, row, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && !board[row + 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && !board[row + 1][column].revealed) {\r\n            board = this.revealSquare(board, row + 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && !board[row + 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column + 1);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    adjacentBombCount = (board, row, column) => {\r\n        let bombCount = 0;\r\n\r\n        // Sequentially check if the given square's adjacent square(s) have bomb(s)\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && board[row - 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && board[row - 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && board[row - 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && board[row][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && board[row][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && board[row + 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && board[row + 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && board[row + 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n\r\n        return bombCount;\r\n    }\r\n\r\n    isIndexOutOfBounds = (board, row, column) => {\r\n        // Check if the given row and column indices are out of bounds\r\n        return !(row >= 0 && row < board.length && column >= 0 && column < board[row].length);\r\n    }\r\n\r\n    handleFirstClick = (row, column, board) => {\r\n        const bombsPoints = [];\r\n        let squareCount = 0;\r\n        let bombCount = 0;\r\n\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[i].length; j++, squareCount++) {\r\n                // If the square is the first-clicked square, force it to not become the bomb \r\n                if (i === row && j === column) {\r\n                    board[i][j].bombed = false;\r\n                }\r\n                // Randomly generate the bombs for the remaining squares\r\n                else {\r\n                    const isBomb = this.randomlyBecomeBomb(this.state.squares, this.state.bombs, squareCount, bombCount);\r\n                    if (isBomb) {\r\n                        bombCount++;\r\n                        bombsPoints.push([i, j]);\r\n                    }\r\n                    board[i][j].bombed = isBomb;\r\n                }\r\n            }\r\n        }\r\n\r\n        return [board, bombsPoints];\r\n    }\r\n\r\n    randomlyBecomeBomb = (squares, bombs, squareCount, bombCount) => {\r\n        if (bombCount < bombs) {\r\n            // Randomly choose to become a bomb\r\n            if (squares - squareCount > bombs - bombCount) {\r\n                return 1 === Math.floor(Math.random() * Math.floor(squares / bombs)) + 1;\r\n            }\r\n            // Edge case when the number of remaining squares is equal to the number of un-generated bombs\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLeftClick = (row, column) => {\r\n        if (!this.state.board[row][column].revealed && !this.state.board[row][column].flagged) {\r\n            let board = _.cloneDeep(this.state.board);\r\n\r\n            // Handle the first click situation\r\n            let bombsPoints = this.state.bombsPoints;\r\n            if (this.state.firstClick) {\r\n                [board, bombsPoints] = this.handleFirstClick(row, column, board);\r\n                this.setState({bombsPoints: bombsPoints, firstClick: false});\r\n            }\r\n\r\n            let newBombsFound = 0;\r\n            // If the revealed square contains a bomb, reveal all the bombs\r\n            if (board[row][column].bombed) {\r\n                board = this.revealAllBombs(board);\r\n                clearInterval(this.state.timer);\r\n            }\r\n            // If the revealed square does not contain a bomb, recursively reveal adjacent square(s) if necessary and reveal any bomb(s) surrounded by revealed squares\r\n            else {\r\n                board = this.revealSquare(board, row, column);\r\n                [board, newBombsFound] = this.revealSurroundedBombs(board, bombsPoints);\r\n            }\r\n\r\n            this.setState(prevState => ({\r\n                board: board,\r\n                failed: board[row][column].bombed,\r\n                bombsFound: prevState.bombsFound + newBombsFound,\r\n                moves: prevState.moves + 1\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleRightClick = (row, column) => {\r\n        // Place a flag on the right-clicked square if it has NOT yet been revealed\r\n        if (!this.state.board[row][column].revealed) {\r\n            const board = _.cloneDeep(this.state.board);\r\n            const square = board[row][column];\r\n\r\n            square.flagged = !square.flagged;\r\n            board[row][column] = square;\r\n\r\n            this.setState({board: board});\r\n        }\r\n    }\r\n\r\n    squareClickedHandler = (event, i, j) => {\r\n        // Handle left click and right click on squares if game has NOT finished\r\n        if (!this.state.success && !this.state.failed) {\r\n            if (event.type === 'click') {\r\n                this.handleLeftClick(i, j);\r\n            }\r\n            else if (event.type === 'contextmenu') {\r\n                event.preventDefault();\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }\r\n    }\r\n\r\n    mouseDownHandler = (i, j) => {\r\n        this.setState({mouseDown: setTimeout(() => {\r\n            if (!this.state.success && !this.state.failed) {\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }, 1000)});\r\n    }\r\n\r\n    mouseUpHandler = () => {\r\n        clearTimeout(this.state.mouseDown);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Set up the timer after the board is rendered\r\n        this.setState({timer: setInterval(() => this.setState(prevState => ({time: prevState.time + 1})), 1000)});\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Check if the game has succeeded everytime a square is revealed\r\n        this.isGameSucceeded();\r\n    }\r\n\r\n    render() {\r\n        let finishedMessage = null;\r\n        if (this.state.success) {\r\n            finishedMessage = (\r\n                <Modal fixedPosition>\r\n                    You swept all the mines in {this.state.time}s with {this.state.moves} moves!\r\n                    <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                </Modal>\r\n            );\r\n        }\r\n        else if (this.state.failed) {\r\n            finishedMessage = (\r\n                <Modal fixedPosition>\r\n                    Bomb exploded!\r\n                    <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                </Modal>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className={css.Canvas}>\r\n                    <div className={css.StatusBar}>\r\n                        <StatusCell>\r\n                            {this.state.time}s\r\n                        </StatusCell>\r\n                        <StatusCell>\r\n                            {this.state.moves}\r\n                            &nbsp;&nbsp;\r\n                            <i className=\"fas fa-shoe-prints\"></i>\r\n                        </StatusCell>\r\n                        <StatusCell>\r\n                            {this.state.bombs - this.state.bombsFound}\r\n                            &nbsp;&nbsp;\r\n                            <i className=\"fas fa-bomb\"></i>\r\n                        </StatusCell>\r\n                    </div>\r\n                    <div className={css.Board}>\r\n                        {this.state.board.map((row, i) => (\r\n                            <div key={i}>\r\n                                {row.map((square, j) => (\r\n                                    <Square\r\n                                        key={(i * this.state.rows) + j}\r\n                                        revealed={square.revealed}\r\n                                        numeric={square.number !== undefined}\r\n                                        bombed={square.bombed}\r\n                                        flagged={square.flagged}\r\n                                        number={null || square.number}\r\n                                        clicked={(event) => this.squareClickedHandler(event, i, j)}\r\n                                        mouseDown={() => this.mouseDownHandler(i, j)}\r\n                                        mouseUp={this.mouseUpHandler} />\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                {finishedMessage}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nCanvas.propTypes = {\r\n    numOfSquares: PropTypes.number.isRequired,\r\n    numOfBombs: PropTypes.number.isRequired,\r\n    restartHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Canvas;","import React, { Component } from 'react';\r\n\r\nimport Canvas from '../Canvas/Canvas.js';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        numOfSquares: null,\r\n        numOfBombs: null\r\n    }\r\n\r\n    buttonClickedHandler = (squares, bombs) => {\r\n        this.setState({numOfSquares: squares, numOfBombs: bombs});\r\n    }\r\n\r\n    gameRestartHandler = () => {\r\n        this.setState({numOfSquares: null, numOfBombs: null});\r\n    }\r\n\r\n    render() {\r\n        const display = this.state.numOfSquares\r\n            ? (\r\n                <Canvas\r\n                    numOfSquares={this.state.numOfSquares}\r\n                    numOfBombs={this.state.numOfBombs}\r\n                    restartHandler={this.gameRestartHandler} />\r\n            )\r\n            : (\r\n                <Modal>\r\n                    Please choose the difficulty\r\n                    <Button clicked={() => this.buttonClickedHandler(100, 10)}>Easy</Button>\r\n                    <Button clicked={() => this.buttonClickedHandler(200, 40)}>Hard</Button>\r\n                </Modal>\r\n            );\r\n\r\n        return display;\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\n\nimport Game from './container/Game/Game.js';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}