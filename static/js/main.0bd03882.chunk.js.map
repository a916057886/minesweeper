{"version":3,"sources":["component/Board/Square/Square.module.css","container/Canvas/Canvas.module.css","component/UI/Modal/Modal.module.css","component/UI/Button/Button.module.css","component/Board/Board.module.css","component/StatusBar/StatusBar.module.css","component/StatusBar/StatusCell/StatusCell.module.css","component/UI/Modal/Modal.js","component/UI/Button/Button.js","component/Board/Square/Square.js","component/Board/Board.js","component/StatusBar/StatusCell/StatusCell.js","component/StatusBar/StatusBar.js","container/Canvas/Canvas.js","container/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","props","className","css","style","position","fixedPosition","children","Button","type","onClick","clicked","React","memo","divCss","Square","revealed","flagged","push","Flag","numeric","Number","bombed","Bomb","Empty","content","numberStyle","number","color","getNumberStyle","join","onContextMenu","onMouseDown","mouseDown","onMouseUp","mouseUp","onTouchStart","onTouchEnd","Board","board","map","row","i","key","square","j","rows","undefined","event","clickedHandler","mouseDownHandler","mouseUpHandler","StatusCell","StatusBar","time","moves","bombs","bombsFound","Canvas","state","columns","squares","squaresRevealed","bombsPoints","timer","firstClick","success","failed","calculateRowsAndColumns","width","Math","floor","populateBoard","isGameSucceeded","revealAllBombs","clearInterval","setState","length","bombPoint","revealSquare","column","bombCount","adjacentBombCount","prevState","revealAdjacentSquares","isIndexOutOfBounds","handleFirstClick","generateBombs","indexOfCoordinate","x","random","y","array","randomlyBecomeBomb","squareCount","handleLeftClick","_","cloneDeep","handleRightClick","squareClickedHandler","preventDefault","setTimeout","clearTimeout","window","innerWidth","numOfSquares","numOfBombs","this","setInterval","finishedMessage","restartHandler","Component","Game","buttonClickedHandler","gameRestartHandler","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bd03882.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__-atLt\",\"Flag\":\"Square_Flag__3L1jX\",\"Number\":\"Square_Number__2fL49\",\"Bomb\":\"Square_Bomb__dW5SF\",\"Empty\":\"Square_Empty__2HdZY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"Canvas_Canvas__1Dk0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1TS5G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3tcKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__wXQhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBar\":\"StatusBar_StatusBar__2iz1F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusCell\":\"StatusCell_StatusCell__ikAFU\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Modal.module.css';\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n        <div className={css.Modal} style={{position: props.fixedPosition ? \"fixed\" : \"absolute\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nModal.propTypes = {\r\n    fixedPosition: PropTypes.bool\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <div className={css.Button} style={props.style}>\r\n            <button type=\"button\" onClick={props.clicked}>{props.children}</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nButton.propTypes = {\r\n    clicked: PropTypes.func.isRequired,\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Square.module.css';\r\n\r\nconst getNumberStyle = (number) => {\r\n    // Choose the font color depending on the value of number\r\n    switch (number) {\r\n        case 1:\r\n            return {color: \"#b0e0e6\"};\r\n        case 2:\r\n            return {color: \"#376c9e\"};\r\n        case 3:\r\n            return {color: \"#252577\"};\r\n        case 4:\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n        case 8:\r\n            return {color: \"#800000\"};\r\n        default: return {color: \"#b0e0e6\"};\r\n    }\r\n}\r\n\r\nconst Square = (props) => {\r\n    // Assign different (can be multiple) CSS classes depending on the props\r\n    const divCss = [css.Square];\r\n    if (!props.revealed && props.flagged)                   divCss.push(css.Flag);\r\n    if (props.revealed && props.numeric)                    divCss.push(css.Number);\r\n    if (props.revealed && props.bombed)                     divCss.push(css.Bomb);\r\n    if (props.revealed && !props.numeric && !props.bombed)  divCss.push(css.Empty);\r\n\r\n    // Populate the content to display in the square depending on the props\r\n    let content = null;\r\n    let numberStyle = null;\r\n    // If the square is revealed and it contains a number\r\n    if (props.revealed && props.numeric && props.number) {\r\n        content = props.number;\r\n        numberStyle = getNumberStyle(props.number);\r\n    }\r\n    // If the square is revealed and it contains a bomb\r\n    else if (props.revealed && props.bombed) {\r\n        content = <i className=\"fas fa-bomb\"></i>;\r\n    }\r\n    // If the square is NOT revealed and it is flagged\r\n    else if (!props.revealed && props.flagged) {\r\n        content = <i className=\"fas fa-flag\"></i>;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={divCss.join(\" \")}\r\n            style={numberStyle}\r\n            onClick={props.clicked}\r\n            onContextMenu={props.clicked}\r\n            onMouseDown={props.mouseDown}\r\n            onMouseUp={props.mouseUp}\r\n            onTouchStart={props.mouseDown}\r\n            onTouchEnd={props.mouseUp}\r\n        >\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nSquare.propTypes = {\r\n    revealed: PropTypes.bool.isRequired,\r\n    numeric: PropTypes.bool.isRequired,\r\n    bombed: PropTypes.bool,\r\n    flagged: PropTypes.bool,\r\n    number: PropTypes.number,\r\n    clicked: PropTypes.func.isRequired,\r\n    mouseDown: PropTypes.func.isRequired,\r\n    mouseUp: PropTypes.func.isRequired\r\n};\r\n\r\nexport default React.memo(Square);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './Board.module.css';\r\nimport Square from './Square/Square.js';\r\n\r\nconst Board = (props) => {\r\n    return (\r\n        <div className={css.Board}>\r\n            {props.board.map((row, i) => (\r\n                <div key={i}>\r\n                    {row.map((square, j) => (\r\n                        <Square\r\n                            key={(i * props.rows) + j}\r\n                            revealed={square.revealed}\r\n                            numeric={square.number !== undefined}\r\n                            bombed={square.bombed}\r\n                            flagged={square.flagged}\r\n                            number={null || square.number}\r\n                            clicked={(event) => props.clickedHandler(event, i, j)}\r\n                            mouseDown={() => props.mouseDownHandler(i, j)}\r\n                            mouseUp={props.mouseUpHandler} />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nBoard.propTypes = {\r\n    board: PropTypes.array.isRequired,\r\n    rows: PropTypes.number.isRequired,\r\n    clickedHandler: PropTypes.func.isRequired,\r\n    mouseDownHandler: PropTypes.func.isRequired,\r\n    mouseUpHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusCell.module.css';\r\n\r\nconst StatusCell = (props) => {\r\n    return (\r\n        <div className={css.StatusCell} style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nStatusCell.propTypes = {\r\n    style: PropTypes.object\r\n}\r\n\r\nexport default StatusCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport css from './StatusBar.module.css';\r\nimport StatusCell from './StatusCell/StatusCell.js';\r\n\r\nconst StatusBar = (props) => {\r\n    return (\r\n        <div className={css.StatusBar}>\r\n            <StatusCell>\r\n                {props.time}s\r\n            </StatusCell>\r\n            <StatusCell>\r\n                {props.moves}\r\n                &nbsp;&nbsp;\r\n                <i className=\"fas fa-shoe-prints\"></i>\r\n            </StatusCell>\r\n            <StatusCell>\r\n                {props.bombs - props.bombsFound}\r\n                &nbsp;&nbsp;\r\n                <i className=\"fas fa-bomb\"></i>\r\n            </StatusCell>\r\n        </div>\r\n    );\r\n};\r\n\r\nStatusBar.propTypes = {\r\n    time: PropTypes.number.isRequired,\r\n    moves: PropTypes.number.isRequired,\r\n    bombs: PropTypes.number.isRequired,\r\n    bombsFound: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StatusBar;","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport css from './Canvas.module.css';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\nimport Board from '../../component/Board/Board';\r\nimport StatusBar from '../../component/StatusBar/StatusBar';\r\n\r\nclass Canvas extends Component {\r\n    constructor(props) {\r\n        super();\r\n        [this.state.rows, this.state.columns] = this.calculateRowsAndColumns(window.innerWidth, props.numOfSquares);\r\n        this.state.squares = props.numOfSquares;\r\n        this.state.bombs = props.numOfBombs;\r\n        this.state.board = this.populateBoard();\r\n    }\r\n\r\n    state = {\r\n        rows: 0,\r\n        columns: 0,\r\n        board: [],\r\n        squares: 0,\r\n        squaresRevealed: 0,\r\n        bombsPoints: [],\r\n        bombs: 0,\r\n        bombsFound: 0,\r\n        moves: 0,\r\n        time: 0,\r\n        timer: null,\r\n        firstClick: true,\r\n        success: false,\r\n        failed: false,\r\n    }\r\n\r\n    calculateRowsAndColumns = (width, squares) => {\r\n        // A bunch of hardcoded columns & rows calculations\r\n        if (width <= 1000) {\r\n            const columns = 10;\r\n            return [squares / columns, columns];\r\n        }\r\n        else {\r\n            let columns = Math.floor(width / 50);\r\n            if (columns >= 20) {\r\n                if (squares === 100) {\r\n                    columns = 20;\r\n                }\r\n                else {\r\n                    columns = 20;\r\n                }\r\n            }\r\n            else if (columns >= 10) {\r\n                columns = 10;\r\n            }\r\n            else {\r\n                columns = 5;\r\n            }\r\n            return [squares / columns, columns];\r\n        }\r\n    }\r\n\r\n    populateBoard = () => {\r\n        const board = [];\r\n\r\n        for (let i = 0; i < this.state.rows; i++) {\r\n            // For each row, push a new array\r\n            board.push([]);\r\n\r\n            for (let j = 0; j < this.state.columns; j++) {\r\n                // For each cell, push a new element\r\n                board[i].push({\r\n                    revealed: false,\r\n                    flagged: false\r\n                });\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    isGameSucceeded = () => {\r\n        if (!this.state.success && !this.state.failed && this.state.squares - this.state.squaresRevealed === this.state.bombs) {\r\n            const board = this.revealAllBombs(this.state.board);\r\n            clearInterval(this.state.timer);\r\n            this.setState({board: board, success: true});\r\n        }\r\n    }\r\n\r\n    revealAllBombs = (board) => {\r\n        // Reveal all the bombs in the board\r\n        for (let i = 0; i < this.state.bombsPoints.length; i++) {\r\n            const bombPoint = this.state.bombsPoints[i];\r\n\r\n            board[bombPoint[0]][bombPoint[1]].flagged = false;\r\n            board[bombPoint[0]][bombPoint[1]].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealSquare = (board, row, column) => {\r\n        // Count the number of adjacent bombs by the given square\r\n        const bombCount = this.adjacentBombCount(board, row, column);\r\n\r\n        if (board[row][column].flagged) {\r\n            this.setState(prevState => ({squaresRevealed: prevState.squaresRevealed + 1, bombsFound: prevState.bombsFound - 1}));\r\n        }\r\n        else {\r\n            this.setState(prevState => ({squaresRevealed: prevState.squaresRevealed + 1}));\r\n        }\r\n        \r\n        board[row][column].revealed = true;\r\n        board[row][column].flagged = false;\r\n        \r\n        // If there is no adjacent bomb, automatically reveal adjacent squares as well\r\n        if (bombCount === 0) {\r\n            board = this.revealAdjacentSquares(board, row, column);\r\n        }\r\n        // If there is adjacent bomb(s), display the number of bomb(s)\r\n        else {\r\n            board[row][column].number = bombCount;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    revealAdjacentSquares = (board, row, column) => {\r\n        // Sequentially reveal the given square's adjacent square(s) if it has NOT yet been revealed\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && !board[row - 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && !board[row - 1][column].revealed) {\r\n            board = this.revealSquare(board, row - 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && !board[row - 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row - 1, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && !board[row][column - 1].revealed) {\r\n            board = this.revealSquare(board, row, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && !board[row][column + 1].revealed) {\r\n            board = this.revealSquare(board, row, column + 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && !board[row + 1][column - 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column - 1);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && !board[row + 1][column].revealed) {\r\n            board = this.revealSquare(board, row + 1, column);\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && !board[row + 1][column + 1].revealed) {\r\n            board = this.revealSquare(board, row + 1, column + 1);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    adjacentBombCount = (board, row, column) => {\r\n        let bombCount = 0;\r\n\r\n        // Sequentially check if the given square's adjacent square(s) have bomb(s)\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column - 1) && board[row - 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column) && board[row - 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row - 1, column + 1) && board[row - 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column - 1) && board[row][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row, column + 1) && board[row][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column - 1) && board[row + 1][column - 1].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column) && board[row + 1][column].bombed) {\r\n            bombCount++;\r\n        }\r\n        if (!this.isIndexOutOfBounds(board, row + 1, column + 1) && board[row + 1][column + 1].bombed) {\r\n            bombCount++;\r\n        }\r\n\r\n        return bombCount;\r\n    }\r\n\r\n    isIndexOutOfBounds = (board, row, column) => {\r\n        // Check if the given row and column indices are out of bounds\r\n        return !(row >= 0 && row < board.length && column >= 0 && column < board[row].length);\r\n    }\r\n\r\n    handleFirstClick = (row, column, board) => {\r\n        // Randomly generate bombs\r\n        const bombsPoints = this.generateBombs(row, column);\r\n\r\n        // Assign value of \"bombed\" property to each square\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[i].length; j++) {\r\n                board[i][j].bombed = this.indexOfCoordinate(bombsPoints, i, j) >= 0;\r\n            }\r\n        }\r\n\r\n        return [board, bombsPoints];\r\n    }\r\n\r\n    generateBombs = (row, column) => {\r\n        const bombsPoints = [];\r\n\r\n        // For each bomb, select a random x and y coordinate\r\n        for (let i = 0; i < this.state.bombs; i++) {\r\n            while (true) {\r\n                const x = Math.floor(Math.random() * this.state.rows);\r\n                const y = Math.floor(Math.random() * this.state.columns);\r\n\r\n                // If this random coordinate does not equal to the first-clicked coordiate and not equal to any of the generated bomb coodinates\r\n                if (x !== row && y !== column && this.indexOfCoordinate(bombsPoints, x, y) === -1) {\r\n                    bombsPoints.push([x, y]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bombsPoints;\r\n    }\r\n\r\n    indexOfCoordinate = (array, x, y) => {\r\n        // Check if the given coordinate already exists in the array;\r\n        let i = 0;\r\n        for (; i < array.length; i++) {\r\n            if (array[i][0] === x && array[i][1] === y) {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return i !== array.length ? i : -1;\r\n    }\r\n\r\n    randomlyBecomeBomb = (squares, bombs, squareCount, bombCount) => {\r\n        if (bombCount < bombs) {\r\n            // Randomly choose to become a bomb\r\n            if (squares - squareCount > bombs - bombCount) {\r\n                return 1 === Math.floor(Math.random() * Math.floor(squares / bombs)) + 1;\r\n            }\r\n            // Edge case when the number of remaining squares is equal to the number of un-generated bombs\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLeftClick = (row, column) => {\r\n        if (!this.state.board[row][column].revealed && !this.state.board[row][column].flagged) {\r\n            let board = _.cloneDeep(this.state.board);\r\n\r\n            // Handle the first click situation\r\n            let bombsPoints = this.state.bombsPoints;\r\n            if (this.state.firstClick) {\r\n                [board, bombsPoints] = this.handleFirstClick(row, column, board);\r\n                this.setState({bombsPoints: bombsPoints, firstClick: false});\r\n            }\r\n\r\n            // If the revealed square contains a bomb, reveal all the bombs\r\n            if (board[row][column].bombed) {\r\n                board = this.revealAllBombs(board);\r\n                clearInterval(this.state.timer);\r\n            }\r\n            // If the revealed square does not contain a bomb, recursively reveal adjacent square(s) if necessary\r\n            else {\r\n                board = this.revealSquare(board, row, column);\r\n            }\r\n\r\n            this.setState(prevState => ({\r\n                board: board,\r\n                failed: board[row][column].bombed,\r\n                moves: prevState.moves + 1\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleRightClick = (row, column) => {\r\n        // Place a flag on the right-clicked square if it has NOT yet been revealed\r\n        if (!this.state.board[row][column].revealed) {\r\n            const board = _.cloneDeep(this.state.board);\r\n            const square = board[row][column];\r\n            const bombsFound = square.flagged ? this.state.bombsFound - 1 : this.state.bombsFound + 1;\r\n\r\n            square.flagged = !square.flagged;\r\n            board[row][column] = square;\r\n\r\n            this.setState({board: board, bombsFound: bombsFound});\r\n        }\r\n    }\r\n\r\n    squareClickedHandler = (event, i, j) => {\r\n        // Handle left click and right click on squares if game has NOT finished\r\n        if (!this.state.success && !this.state.failed) {\r\n            if (event.type === 'click') {\r\n                this.handleLeftClick(i, j);\r\n            }\r\n            else if (event.type === 'contextmenu') {\r\n                event.preventDefault();\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }\r\n    }\r\n\r\n    mouseDownHandler = (i, j) => {\r\n        // Set up the timeout timer when mouse is held down\r\n        this.setState({mouseDown: setTimeout(() => {\r\n            if (!this.state.success && !this.state.failed) {\r\n                this.handleRightClick(i, j);\r\n            }\r\n        }, 1000)});\r\n    }\r\n\r\n    mouseUpHandler = () => {\r\n        // Clear the timeout timer after mouse is no longer held down\r\n        clearTimeout(this.state.mouseDown);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Set up the timer after the board is rendered\r\n        this.setState({timer: setInterval(() => this.setState(prevState => ({time: prevState.time + 1})), 1000)});\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Check if the game has succeeded everytime a square is revealed\r\n        this.isGameSucceeded();\r\n    }\r\n\r\n    render() {\r\n        // Display the appropriate message after game is finished\r\n        let finishedMessage = null;\r\n        if (this.state.success) {\r\n            finishedMessage = (\r\n                <Modal fixedPosition>\r\n                    You swept all the mines in {this.state.time}s with {this.state.moves} moves!\r\n                    <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                </Modal>\r\n            );\r\n        }\r\n        else if (this.state.failed) {\r\n            finishedMessage = (\r\n                <Modal fixedPosition>\r\n                    Mine exploded!\r\n                    <Button clicked={this.props.restartHandler}>Restart</Button>\r\n                </Modal>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className={css.Canvas}>\r\n                    <StatusBar\r\n                        time={this.state.time}\r\n                        moves={this.state.moves}\r\n                        bombs={this.state.bombs}\r\n                        bombsFound={this.state.bombsFound} />\r\n                    <Board\r\n                        board={this.state.board}\r\n                        rows={this.state.rows}\r\n                        clickedHandler={this.squareClickedHandler}\r\n                        mouseDownHandler={this.mouseDownHandler}\r\n                        mouseUpHandler={this.mouseUpHandler} />\r\n                </div>\r\n                {finishedMessage}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nCanvas.propTypes = {\r\n    numOfSquares: PropTypes.number.isRequired,\r\n    numOfBombs: PropTypes.number.isRequired,\r\n    restartHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Canvas;","import React, { Component } from 'react';\r\n\r\nimport Canvas from '../Canvas/Canvas.js';\r\nimport Modal from '../../component/UI/Modal/Modal.js';\r\nimport Button from '../../component/UI/Button/Button.js';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        numOfSquares: null,\r\n        numOfBombs: null\r\n    }\r\n\r\n    buttonClickedHandler = (squares, bombs) => {\r\n        this.setState({numOfSquares: squares, numOfBombs: bombs});\r\n    }\r\n\r\n    gameRestartHandler = () => {\r\n        this.setState({numOfSquares: null, numOfBombs: null});\r\n    }\r\n\r\n    render() {\r\n        const display = this.state.numOfSquares\r\n            ? (\r\n                <Canvas\r\n                    numOfSquares={this.state.numOfSquares}\r\n                    numOfBombs={this.state.numOfBombs}\r\n                    restartHandler={this.gameRestartHandler} />\r\n            )\r\n            : (\r\n                <Modal>\r\n                    Please choose the difficulty\r\n                    <Button clicked={() => this.buttonClickedHandler(100, 5)}>Easy</Button>\r\n                    <Button clicked={() => this.buttonClickedHandler(200, 40)}>Hard</Button>\r\n                </Modal>\r\n            );\r\n\r\n        return display;\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\n\nimport Game from './container/Game/Game.js';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}